openapi: 3.0.3
info:
  title: API Documentation v1.0.0
  description: "This Postman collection provides a sample interface to the UltraDNS (UDNS) REST API. It’s organized around
    resource‑focused folders:\n\n- **Zones**: create, read, update, and delete DNS zones and records\n    \n- **Reports**:
    retrieve usage statistics and analytics\n    \n- **…other resources**: each top‑level or subfolder groups related endpoints\n\
    \    \n\nA global pre‑request script handles authentication and common helpers:\n\n1. **Reads** your `username` and `password`
    from the selected environment\n    \n2. **Requests** a bearer token and saves it to `{{bearerToken}}`\n    \n3. **Automatically
    refreshes** the token when it expires\n    \n4. **Exposes** utility functions on the `utils` object\n    \n\n**Setup before
    running:**\n\n1. Select the appropriate Postman environment.\n    \n2. Define `username` and `password` as environment
    variables.\n    \n\n**Using helpers:**\n\n``` js\n// call any helper in scripts or tests\nutils.functionName(arg1, arg2)\n\
    \n ```\n\nWith this in place, every folder and request can focus on its specific API logic, while authentication and shared
    utilities stay centralized."
  version: 1.0.0
  contact: {}
servers:
- url: https://api.ultradns.com
  description: Primary UltraDNS API
paths:
  /v3/zones:
    get:
      tags:
      - Zones
      summary: List Zones
      description: Retrieves all DNS zones in your account. The response returns an array of zone objects, each 
        including details such as zone name, status, default TTL, and name servers.
      operationId: listZones
      responses:
        '200':
          description: ''
    post:
      tags:
      - Zones
      summary: Create Zone
      description: "Creates a new DNS zone. The request body must include:\n\n- **properties.name**: zones_zoneName (the name
        of the new zone)\n    \n- **properties.accountName**: username (your UltraDNS account)\n    \n- **properties.type**:
        PRIMARY\n    \n- **primaryCreateInfo.forceImport**: true or false\n    \n- **primaryCreateInfo.createType**: NEW or
        IMPORT\n    \n- **changeComment**: free‑form text describing why the zone is being created\n    \n\nMake sure the
        environment variables zones_zoneName and username are set before running this request."
      operationId: createZone
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                changeComment:
                  type: string
                  example: Create zone as agreed
                primaryCreateInfo:
                  type: object
                  properties:
                    createType:
                      type: string
                      example: NEW
                    forceImport:
                      type: boolean
                      example: true
                properties:
                  type: object
                  properties:
                    accountName:
                      type: string
                      example: '{{username}}'
                    name:
                      type: string
                      example: '{{zones_zoneName}}'
                    type:
                      type: string
                      example: PRIMARY
            examples:
              Create Zone:
                value:
                  changeComment: Create zone as agreed
                  primaryCreateInfo:
                    createType: NEW
                    forceImport: true
                  properties:
                    accountName: '{{username}}'
                    name: '{{zones_zoneName}}'
                    type: PRIMARY
      responses:
        '200':
          description: ''
  /v3/zones/{zones_zoneName}:
    get:
      tags:
      - Zones
      summary: List Zone Properties
      description: Retrieves metadata for a specific DNS zone, including record count, name servers, status, type, and 
        other zone‑level properties. Requires the `zones_zoneName` path variable.
      operationId: listZoneProperties
      responses:
        '200':
          description: ''
    parameters:
    - name: zones_zoneName
      in: path
      required: true
      schema:
        type: string
  /v3/zones/{zones_zoneName}/webforwards:
    get:
      tags:
      - Zones
      summary: List Zone Web Forwards
      description: "Retrieves all web‑forward rules configured for a specific DNS zone. Requires the `zone_zoneName` environment
        variable. The response returns an array of web‑forward objects, each including fields such as:\n\n- `guid` (the forward’s
        unique ID)\n    \n- `requestTo` (the hostname being forwarded)\n    \n- `defaultRedirectTo` (the target URL)\n   \
        \ \n- `defaultForwardType` (301, 302, etc.)"
      operationId: listZoneWebForwards
      responses:
        '200':
          description: ''
    parameters:
    - name: zones_zoneName
      in: path
      required: true
      schema:
        type: string
  /v3/zones/export:
    post:
      tags:
      - Zones
      summary: Initiate Zone(s) Export
      description: "Initiates an export job for the specified DNS zone. Requires the `zones_zoneName` environment variable.\n\
        \nOn success, returns **202 Accepted** with an `x-task-id` header containing the export job ID. Use the Task endpoints
        to poll for status and retrieve the exported zone file."
      operationId: initiateZoneSExport
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                zoneNames:
                  type: array
                  items:
                    type: string
                    example: '{{zones_zoneName}}'
                  example:
                  - '{{zones_zoneName}}'
            examples:
              Initiate Zone(s) Export:
                value:
                  zoneNames:
                  - '{{zones_zoneName}}'
      responses:
        '200':
          description: ''
  /v1/zones/{zones_zoneName}/snapshot:
    post:
      tags:
      - Zones
      summary: Create Snapshot
      description: "Creates a point‑in‑time snapshot of the specified DNS zone, replacing any existing snapshot. Requires
        the `zones_zoneName` environment variable.\n\n- On success, returns **202 Accepted** with an `x-task-id` header containing
        the snapshot job ID\n    \n- Use the Task endpoints to poll for status and confirm completion before attempting to
        restore or export the snapshot"
      operationId: createSnapshot
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: {}
            examples:
              Create Snapshot:
                value: {}
      responses:
        '200':
          description: ''
    parameters:
    - name: zones_zoneName
      in: path
      required: true
      schema:
        type: string
  /v1/zones/{zones_zoneName}/restore:
    post:
      tags:
      - Zones
      summary: Restore Snapshot
      description: "Restores the specified DNS zone to its most recent snapshot, overwriting the current configuration. This
        action is **destructive and irreversible**. Requires the `zones_zoneName` environment variable.\n\nOn success, returns
        **202 Accepted** with an `x-task-id` header containing the restore job ID. Use the Task endpoints to poll for status
        and confirm completion."
      operationId: restoreSnapshot
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: {}
            examples:
              Restore Snapshot:
                value: {}
      responses:
        '200':
          description: ''
    parameters:
    - name: zones_zoneName
      in: path
      required: true
      schema:
        type: string
  /zones/{zones_zoneName}/transfer:
    post:
      tags:
      - Zones
      summary: Request Zone Transfer
      description: "Requests a synchronization of the specified secondary DNS zone. Requires the `zones_zoneName` environment
        variable.\n\nOn success, returns **200 OK**. You can verify the transfer by fetching the zone details and checking
        the serial or record changes."
      operationId: requestZoneTransfer
      responses:
        '200':
          description: ''
    parameters:
    - name: zones_zoneName
      in: path
      required: true
      schema:
        type: string
  /zones/{records_zoneName}/rrsets:
    get:
      tags:
      - Records
      summary: List RRsets
      description: "Retrieves all resource record sets (RRSets) in the specified DNS zone. Requires the `records_zoneName`
        environment variable.\n\nSupports optional query parameters to filter results (for example, by record type, ownerName,
        TTL) or paginate the list."
      operationId: listRrsets
      responses:
        '200':
          description: ''
    parameters:
    - name: records_zoneName
      in: path
      required: true
      schema:
        type: string
  /zones/{records_zoneName}/rrsets/{records_type}:
    get:
      tags:
      - Records
      summary: List Records by Type
      description: Retrieves all resource record sets (RRSets) of a specific type within the specified DNS zone. 
        Requires the `records_zoneName` and `records_type` environment variables. Set `records_type` to the desired 
        record type (e.g., A, CNAME, TXT) to filter the results. The response returns an array of matching RRSet 
        objects.
      operationId: listRecordsByType
      responses:
        '200':
          description: ''
    parameters:
    - name: records_zoneName
      in: path
      required: true
      schema:
        type: string
    - name: records_type
      in: path
      required: true
      schema:
        type: string
  /v3/zones/{records_zoneName}/rrsets:
    get:
      tags:
      - Records
      summary: List Pools
      description: Retrieves all traffic‑management pools (RRSets configured for advanced DNS features) in the specified
        DNS zone. Requires the `records_zoneName` environment variable. The response returns an array of pool RRSet 
        objects, each including its pool-specific metadata.
      operationId: listPools
      parameters:
      - name: q
        in: query
        schema:
          type: string
          example: kind:POOLS
      responses:
        '200':
          description: ''
    parameters:
    - name: records_zoneName
      in: path
      required: true
      schema:
        type: string
  /zones/{records_zoneName}/rrsets/{records_type}/{records_ownerName}:
    put:
      tags:
      - Records
      summary: Update RRset
      description: "Updates an existing resource record set (RRSet) in the specified DNS zone.\n\n- **Required variables:**\n\
        \    \n    - records_zoneName – the DNS zone containing the RRSet\n        \n    - records_ownerName – the owner name
        (record label) of the RRSet\n        \n    - records_type – the record type (A, CNAME, MX, etc.)\n        \n- **Body
        construction:**\n    \n    A pre-request script builds the `requestBody` object with your `recordTtl` and `recordRdata`,
        stringifies it, and sets it to the `requestBody` environment variable. Any records not included in this body will
        be removed from the RRSet."
      operationId: updateRrset
      requestBody:
        content:
          application/json:
            examples:
              Update RRset:
                value: '{{requestBody}}'
            schema:
              type: object
              additionalProperties: true
      responses:
        '200':
          description: ''
    post:
      tags:
      - Records
      summary: Create RRset
      description: "Creates a new resource record set (RRSet) in the specified DNS zone.\n\n- **Required variables:**\n  \
        \  \n    - `records_zoneName` – target DNS zone\n        \n    - `records_ownerName` – owner name (record label)\n\
        \        \n    - `records_type` – record type (A, CNAME, MX, etc.)\n        \n- **Body construction:**  \n    A pre‑request
        script reads these environment vars plus:\n    \n    - `recordTtl` (default “300”)\n        \n    - `recordRdata`
        (e.g. “1.1.1.1” for A records)  \n        It builds an object (`{ ttl: recordTtl, rdata: [ recordRdata ] }`), stringifies
        it, and sets it to the `requestBody` environment variable."
      operationId: createRrset
      requestBody:
        content:
          application/json:
            examples:
              Create RRset:
                value: '{{requestBody}}'
            schema:
              type: object
              additionalProperties: true
      responses:
        '200':
          description: ''
    delete:
      tags:
      - Records
      summary: Delete RRset
      description: "Deletes the specified resource record set (RRSet) from the given DNS zone.\n\n- **Required variables:**\n\
        \    \n    - records_zoneName – the DNS zone containing the RRSet\n        \n    - records_ownerName – the owner name
        (record label) of the RRSet\n        \n    - records_type – the record type (A, CNAME, TXT, etc.)"
      operationId: deleteRrset
      responses:
        '200':
          description: ''
    parameters:
    - name: records_zoneName
      in: path
      required: true
      schema:
        type: string
    - name: records_type
      in: path
      required: true
      schema:
        type: string
    - name: records_ownerName
      in: path
      required: true
      schema:
        type: string
  /tasks/{currentTask}:
    get:
      tags:
      - Tasks
      summary: Check Task
      description: Checks the status of a background task. Requires the `currentTask` variable, which the collection 
        automatically populates from the x-task-id header of previous async operations.
      operationId: checkTask
      responses:
        '200':
          description: ''
    parameters:
    - name: currentTask
      in: path
      required: true
      schema:
        type: string
  /tasks/{currentTask}/result:
    get:
      tags:
      - Tasks
      summary: Task Result
      description: Retrieves the final result of a completed background task. Requires the `currentTask` variable, which
        the collection automatically populates from the x-task-id header of prior async requests. Returns the task’s 
        result payload when finished.
      operationId: taskResult
      responses:
        '200':
          description: ''
    parameters:
    - name: currentTask
      in: path
      required: true
      schema:
        type: string
  /v1/reports/dns_resolution/query_volume/host:
    post:
      tags:
      - Reports
      summary: Create NXDomain Report
      description: "Retrieves an advanced NXDOMAIN report, breaking down “no-such-domain” responses by host over a specified
        date range. This call is asynchronous and returns a JSON payload containing a `requestId` (saved automatically to
        `reports_requestId`). If you don’t set `reports_startDate` or `reports_endDate`, a pre-request script defaults them
        to the last 30 days.\n\n**Required variables**\n\n- `reports_startDate` – report start date (YYYY-MM-DD)\n    \n-
        `reports_endDate` – report end date (YYYY-MM-DD)\n    \n- `zones_zoneName` – DNS zone to include in the report\n \
        \   \n\n**Query parameters**\n\n- `advance=true` – enable advanced reporting mode\n    \n- `reportType=ADVANCED_NXDOMAINS`
        – select the NXDOMAIN breakdown report\n    \n- `limit` (optional) – maximum number of host entries to return\n  \
        \  \n\n**Request body**\n\n- `hostQueryVolume`: object with `startDate`, `endDate`, and a `zoneNames` array\n    \n\
        - `sortFields`: maps field names (e.g., `nxdomainCount`) to `\"ASC\"` (ascending) or `\"DESC\"` (descending) to control
        result order\n    \n\nOnce invoked, note that the response’s `requestId` is stored in `reports_requestId`. Use that
        ID with the Reports “Retrieve Report” endpoint to poll for status and retrieve the completed data."
      operationId: createNxdomainReport
      parameters:
      - name: advance
        in: query
        schema:
          type: string
          example: 'true'
      - name: reportType
        in: query
        schema:
          type: string
          example: ADVANCED_NXDOMAINS
      - name: limit
        in: query
        schema:
          type: string
          example: '100000'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                hostQueryVolume:
                  type: object
                  properties:
                    endDate:
                      type: string
                      example: '{{reports_endDate}}'
                    startDate:
                      type: string
                      example: '{{reports_startDate}}'
                    zoneNames:
                      type: array
                      items:
                        type: string
                        example: '{{zones_zoneName}}'
                      example:
                      - '{{zones_zoneName}}'
                sortFields:
                  type: object
                  properties:
                    nxdomainCount:
                      type: string
                      example: DESC
            examples:
              Create NXDomain Report:
                value:
                  hostQueryVolume:
                    endDate: '{{reports_endDate}}'
                    startDate: '{{reports_startDate}}'
                    zoneNames:
                    - '{{zones_zoneName}}'
                  sortFields:
                    nxdomainCount: DESC
      responses:
        '200':
          description: ''
  /reports/dns_resolution/query_volume/zone/no_queries:
    post:
      tags:
      - Reports
      summary: Zero Query Report
      description: "Retrieves a Zero‑Query report listing all zones under a specified account that received no DNS queries
        in the given date range. This call is asynchronous and returns a JSON payload containing a `requestId`, which is saved
        to `reports_requestId` by the collection. If you omit `reports_startDate` or `reports_endDate`, they default to the
        last 30 days.\n\n**Required variables**\n\n- `accountName` – the account to report on (e.g., use `subaccounts_accountName`
        or any accessible account)\n    \n- `reports_startDate` – report start date (YYYY-MM-DD)\n    \n- `reports_endDate`
        – report end date (YYYY-MM-DD)\n    \n- `wrap` – boolean (true to wrap results in an envelope)\n    \n\nOnce invoked,
        pass the returned `requestId` to the Reports “Retrieve Report” endpoint to poll for completion and retrieve the final
        data."
      operationId: zeroQueryReport
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                zeroZoneQueryVolume:
                  type: object
                  properties:
                    accountName:
                      type: string
                      example: '{{subaccounts_accountName}}'
                    reportEndDate:
                      type: string
                      example: '{{reports_endDate}}'
                    reportStartDate:
                      type: string
                      example: '{{reports_startDate}}'
                    wrap:
                      type: boolean
                      example: true
            examples:
              Zero Query Report:
                value:
                  zeroZoneQueryVolume:
                    accountName: '{{subaccounts_accountName}}'
                    reportEndDate: '{{reports_endDate}}'
                    reportStartDate: '{{reports_startDate}}'
                    wrap: true
      responses:
        '200':
          description: ''
  /v1/requests/{reports_requestId}:
    get:
      tags:
      - Reports
      summary: Retrieve Report
      description: Retrieves the results of a previously generated report. Requires the `reports_requestId` variable, 
        which the collection automatically populates from the report creation response. Returns the report data payload 
        once complete, or status and error details if still processing or failed.
      operationId: retrieveReport
      responses:
        '200':
          description: ''
    parameters:
    - name: reports_requestId
      in: path
      required: true
      schema:
        type: string
  /accounts/{username}/telemetryWebhook/test:
    post:
      tags:
      - Webhook
      summary: Test Endpoint
      description: "Creates a test telemetry event against your configured webhook to verify connectivity.\n\n**Required variables**\n\
        \n- `username` – the UltraDNS account name (may differ from your login username)\n    \n- `webhook_endpointUrl` –
        the URL to receive the test event\n    \n\nA post‑request script automatically extracts `telemetryEventId` from the
        JSON response and saves it to the `webhook_telemetryId` environment variable. Use that value with the Verify endpoint
        to confirm delivery."
      operationId: testEndpoint
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  example: TEST_TELEMETRY_WEBHOOK
                url:
                  type: string
                  example: '{{webhook_endpointUrl}}'
            examples:
              Test Endpoint:
                value:
                  type: TEST_TELEMETRY_WEBHOOK
                  url: '{{webhook_endpointUrl}}'
      responses:
        '200':
          description: ''
    parameters:
    - name: username
      in: path
      required: true
      schema:
        type: string
  /accounts/{username}/telemetryWebhook/test/{webhook_telemetryId}:
    get:
      tags:
      - Webhook
      summary: Verify
      description: Verifies delivery of a test telemetry event to your webhook. Requires the `username` (account name) 
        and `webhook_telemetryId` (saved by the Test endpoint’s script). Returns a JSON payload indicating success or 
        error details.
      operationId: verify
      responses:
        '200':
          description: ''
    parameters:
    - name: username
      in: path
      required: true
      schema:
        type: string
    - name: webhook_telemetryId
      in: path
      required: true
      schema:
        type: string
  /accounts/{username}/settings/PUSH_NOTIFICATIONS:
    post:
      tags:
      - Webhook
      summary: Create
      description: "Creates a push‑notification webhook configuration that delivers telemetry events for all account changes.\n\
        \n**Requires:**\n\n- `username` – the UltraDNS account name\n    \n- `webhook_endpointUrl` – the URL to receive live
        notifications\n    \n\nBy default, this enables notifications for `ALL_CHANGES`. On success, returns the created webhook
        configuration in the response payload."
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                webhooks:
                  type: array
                  items:
                    type: object
                    properties:
                      enable:
                        type: boolean
                        example: true
                      include:
                        type: object
                        properties:
                          ALL_CHANGES:
                            type: boolean
                            example: true
                      url:
                        type: string
                        example: '{{webhook_endpointUrl}}'
                  example:
                  - enable: true
                    include:
                      ALL_CHANGES: true
                    url: '{{webhook_endpointUrl}}'
            examples:
              Create:
                value:
                  webhooks:
                  - enable: true
                    include:
                      ALL_CHANGES: true
                    url: '{{webhook_endpointUrl}}'
      responses:
        '200':
          description: ''
    parameters:
    - name: username
      in: path
      required: true
      schema:
        type: string
  /subaccounts:
    get:
      tags:
      - Subaccounts
      summary: List Subaccounts
      description: Retrieves all subaccounts under your primary UltraDNS account.
      operationId: listSubaccounts
      responses:
        '200':
          description: ''
  /subaccounts/zones:
    get:
      tags:
      - Subaccounts
      summary: List Subaccounts Zones
      description: Retrieves all DNS zones across every subaccount under your primary account.
      operationId: listSubaccountsZones
      responses:
        '200':
          description: ''
  /subaccounts/{subaccounts_accountName}/token:
    post:
      tags:
      - Subaccounts
      summary: Subaccount Authorization
      description: Generates a bearer token for masquerading as the specified subaccount. Requires 
        the `subaccounts_accountName` variable. Returns a JSON payload with new `bearerToken` and `refreshToken` scoped 
        to that subaccount, which you can then use for subsequent subaccount‑scoped requests.
      operationId: subaccountAuthorization
      responses:
        '200':
          description: ''
    parameters:
    - name: subaccounts_accountName
      in: path
      required: true
      schema:
        type: string
  /accounts/{username}/settings/DNSSEC_SETTINGS:
    put:
      tags:
      - DNSSEC Multi-Signer
      summary: Update DNSSEC Settings Copy
      description: "UltraDNS allows the configuration of some default values to be used when signing a zone. These  \nconfigurations
        are then set for DNSSEC signing of every zone in the account:\n\n- DNSKEY TTL - The Time to Live (TTL) in seconds,
        used for the DNSKEY resource record set. Default value is 86400 (1 day) with valid values in the range of 300-172800
        seconds (5 minutes - 2 days).\n    \n- RRSIG Validity Period - Sets the RRSIG validity interval, in days when signing
        responses. Default value of 14 (2 weeks), with valid values in the range of 5-30 (days).\n    \n\nThese default value
        preferences can be set using the API as shown below. Once set, these values will be used for every zone signing, rollover,
        and resigning action on every zone in the account.\n\nNOTE: Use the Initialize (POST) API call to initially set these
        values and the Remove (DELETE) API call to delete them."
      operationId: updateDnssecSettingsCopy
      requestBody:
        content:
          application/json:
            examples:
              Update DNSSEC Settings Copy:
                value: "{\r\n    \"dnssecSettings\": {\r\n        \"dnskeyTtl\": {{dnssec_dnskey_ttl}},\r\n        \"rrsigValidity\"\
                  : {{dnssec_rrsig_validity}} \r\n    }\r\n}"
            schema:
              type: object
              additionalProperties: true
      responses:
        '200':
          description: ''
    post:
      tags:
      - DNSSEC Multi-Signer
      summary: Initialize DNSSEC Settings
      description: "UltraDNS allows the configuration of some default values to be used when signing a zone. These  \nconfigurations
        are then set for DNSSEC signing of every zone in the account:\n\n- DNSKEY TTL - The Time to Live (TTL) in seconds,
        used for the DNSKEY resource record set. Default value is 86400 (1 day) with valid values in the range of 300-172800
        seconds (5 minutes - 2 days).\n    \n- RRSIG Validity Period - Sets the RRSIG validity interval, in days when signing
        responses. Default value of 14 (2 weeks), with valid values in the range of 5-30 (days).\n    \n\nThese default value
        preferences can be set using the API as shown below. Once set, these values will be used for every zone signing, rollover,
        and resigning action on every zone in the account.\n\nNOTE: If you have previously set these values with a call to
        this API then you will need to use the Update (PUT) API call to update them and the Remove (DELETE) API call to delete
        them."
      operationId: initializeDnssecSettings
      requestBody:
        content:
          application/json:
            examples:
              Initialize DNSSEC Settings:
                value: "{\r\n    \"dnssecSettings\": {\r\n        \"dnskeyTtl\": {{dnssec_dnskey_ttl}},\r\n        \"rrsigValidity\"\
                  : {{dnssec_rrsig_validity}} \r\n    }\r\n}"
            schema:
              type: object
              additionalProperties: true
      responses:
        '200':
          description: ''
    delete:
      tags:
      - DNSSEC Multi-Signer
      summary: Remove DNSSEC Settings
      description: "UltraDNS allows the configuration of some default values to be used when signing a zone. These  \nconfigurations
        are then set for DNSSEC signing of every zone in the account:\n\n- DNSKEY TTL - The Time to Live (TTL) in seconds,
        used for the DNSKEY resource record set. Default value is 86400 (1 day) with valid values in the range of 300-172800
        seconds (5 minutes - 2 days).\n    \n- RRSIG Validity Period - Sets the RRSIG validity interval, in days when signing
        responses. Default value of 14 (2 weeks), with valid values in the range of 5-30 (days).\n    \n\nThese default value
        preferences can be set using the API as shown below. Once set, these values will be used for every zone signing, rollover,
        and resigning action on every zone in the account.\n\nNOTE: Use the Initialize (POST) API call to initially set these
        values and the Update (PUT) API call to update them."
      operationId: removeDnssecSettings
      responses:
        '200':
          description: ''
    parameters:
    - name: username
      in: path
      required: true
      schema:
        type: string
  /zones/{zones_zoneName}/dnssec:
    get:
      tags:
      - DNSSEC Multi-Signer
      summary: Get DS Records
      description: Provides detailed information regarding the current DNSSEC status of a zone. This API call can be 
        used to get the DS (Designated Signer) records for the zone that can be used by the parent zone to establish a 
        chain-of-trust for the zone.
      operationId: getDsRecords
      responses:
        '200':
          description: ''
    put:
      tags:
      - DNSSEC Multi-Signer
      summary: Update External Signer
      description: "Configure external signer keys (KSK and ZSK) for a DNSSEC signed zone. KSK and ZSK DNSKEY records are
        formatted as follows:\n\n```\n<FLAGS> <PROTOCOL_VALUE> <ALGORITHM> <BASE64_ENCODED_PUBLIC_KEY>\n\n ```\n\nNOTE: For
        an unsigned zone you can change the method to POST and set the value of _externalKeys_ to both DNSSEC sign a zone
        and install the DNSKEY records from an external provider."
      operationId: updateExternalSigner
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                externalKeys:
                  type: array
                  items: {}
                  example: []
            examples:
              Remove External Signer:
                value:
                  externalKeys: []
              Update External Signer:
                value:
                  externalKeys:
                  - ksk:
                    - '{{dnssec_extkey_ksk}}'
                    zsk:
                    - '{{dnssec_extkey_zsk}}'
      responses:
        '200':
          description: ''
    post:
      tags:
      - DNSSEC Multi-Signer
      summary: DNSSEC Sign Zone
      description: "This API is used to DNSSEC sign a zone on UltraDNS and can be used on both primary and secondary zones.\n\
        \nIf you have external signer DNSKEY information you can include that as an _externalKeys_ element in the JSON payload
        (see [Update External Signer](https://go.postman.co/workspace/My-Workspace~44d8667f-697e-43dd-8c23-aea1d7afb89c/documentation/269716-96acc28c-c730-4484-9a15-43f2bb753d3a?entity=request-09c10a66-1e56-4e2f-8504-9f15c8dd7766)),
        otherwise the payload is empty."
      operationId: dnssecSignZone
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: {}
            examples:
              DNSSEC Sign Zone:
                value: {}
      responses:
        '200':
          description: ''
    delete:
      tags:
      - DNSSEC Multi-Signer
      summary: DNSSEC Un-Sign Zone
      description: This API call will unsign a DNSSEC signed zone, removing all DNSKEY information (including external 
        keys).
      operationId: dnssecUnSignZone
      responses:
        '200':
          description: ''
    parameters:
    - name: zones_zoneName
      in: path
      required: true
      schema:
        type: string
  /zones/{zones_zoneName}/rrsets/{sb_rrType}/{sb_ownerName}:
    post:
      tags:
      - Traffic Management
      - SiteBacker
      summary: Create SiteBacker Pool
      description: "**Overview**  \n  \nCreates a new SiteBacker pool under the specified zone and record owner. The request
        body must include:\n\n- **rdata**: an array of IP addresses to include in the pool\n    \n- **rdataInfo**: one object
        per IP with:\n    \n    - `state` (NORMAL, FORCE_ACTIVE, FORCE_FAIL)\n        \n    - `runProbes` (true / false)\n\
        \        \n    - `priority` (positive integer)\n        \n    - `failoverDelay` (0 or positive integer)\n        \n\
        \    - `threshold` (positive integer)\n        \n    - `availableToServe` (true / false)\n        \n- **backupRecords**:
        an array of fallback records, each with:\n    \n    - `rdata` (IP address)\n        \n    - `failoverDelay` (0 or
        positive integer)"
      operationId: createSitebackerPool
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                profile:
                  type: object
                  properties:
                    '@context':
                      type: string
                      example: http://schemas.ultradns.com/SBPool.jsonschema
                    actOnProbes:
                      type: boolean
                      example: true
                    backupRecords:
                      type: array
                      items:
                        type: object
                        properties:
                          failoverDelay:
                            type: number
                            example: 0
                          rdata:
                            type: string
                            example: 9.9.9.9
                      example:
                      - failoverDelay: 0
                        rdata: 9.9.9.9
                    description:
                      type: string
                      example: Test SiteBacker Pool
                    failureThreshold:
                      type: number
                      example: 0
                    maxActive:
                      type: number
                      example: 1
                    maxServed:
                      type: number
                      example: 1
                    order:
                      type: string
                      example: FIXED
                    rdataInfo:
                      type: array
                      items:
                        type: object
                        properties:
                          availableToServe:
                            type: boolean
                            example: true
                          failoverDelay:
                            type: number
                            example: 0
                          priority:
                            type: number
                            example: 1
                          runProbes:
                            type: boolean
                            example: true
                          state:
                            type: string
                            example: NORMAL
                          threshold:
                            type: number
                            example: 1
                      example:
                      - availableToServe: true
                        failoverDelay: 0
                        priority: 1
                        runProbes: true
                        state: NORMAL
                        threshold: 1
                      - availableToServe: true
                        failoverDelay: 0
                        priority: 1
                        runProbes: true
                        state: NORMAL
                        threshold: 1
                      - availableToServe: true
                        failoverDelay: 0
                        priority: 1
                        runProbes: true
                        state: NORMAL
                        threshold: 1
                      - availableToServe: true
                        failoverDelay: 0
                        priority: 1
                        runProbes: true
                        state: NORMAL
                        threshold: 1
                    runProbes:
                      type: boolean
                      example: true
                rdata:
                  type: array
                  items:
                    type: string
                    example: 1.1.1.1
                  example:
                  - 1.1.1.1
                  - 2.2.2.2
                  - 3.3.3.3
                  - 4.4.4.4
                ttl:
                  type: number
                  example: 300
            examples:
              Create SiteBacker Pool:
                value:
                  profile:
                    '@context': http://schemas.ultradns.com/SBPool.jsonschema
                    actOnProbes: true
                    backupRecords:
                    - failoverDelay: 0
                      rdata: 9.9.9.9
                    description: Test SiteBacker Pool
                    failureThreshold: 0
                    maxActive: 1
                    maxServed: 1
                    order: FIXED
                    rdataInfo:
                    - availableToServe: true
                      failoverDelay: 0
                      priority: 1
                      runProbes: true
                      state: NORMAL
                      threshold: 1
                    - availableToServe: true
                      failoverDelay: 0
                      priority: 1
                      runProbes: true
                      state: NORMAL
                      threshold: 1
                    - availableToServe: true
                      failoverDelay: 0
                      priority: 1
                      runProbes: true
                      state: NORMAL
                      threshold: 1
                    - availableToServe: true
                      failoverDelay: 0
                      priority: 1
                      runProbes: true
                      state: NORMAL
                      threshold: 1
                    runProbes: true
                  rdata:
                  - 1.1.1.1
                  - 2.2.2.2
                  - 3.3.3.3
                  - 4.4.4.4
                  ttl: 300
      responses:
        '200':
          description: ''
    patch:
      tags:
      - Traffic Management
      - SiteBacker
      summary: Record Priority Update
      description: "**Overview**  \n  \nUpdates the failover/load‑order priority of a single member in a SiteBacker pool.
        The member is selected by its index in the pool’s member list (the “path” parameter):\n\n- **Index 0** targets the
        first (lowest‑priority) record\n    \n- **Index 1** targets the second record\n    \n- And so on for larger pools\n\
        \    \n\nChanging the member’s `priority` value determines its position in the failover or load‑balancing sequence.\n\
        \n**Usage Notes**\n\n- In a simple two‑member pool (e.g. priorities 1 and 101), you can swap their roles by PATCHing
        each index without altering the request body.\n    \n- For pools with more than two members, adjust each member’s
        `priority` to reflect the exact ordering you need."
      operationId: recordPriorityUpdate
      requestBody:
        content:
          application/json:
            examples:
              Record Priority Update:
                value: "[\r\n    // JSON DTO (pool record with lowest value for priority field.\r\n    {\r\n        \"op\"\
                  : \"replace\",\r\n        \"path\": \"/profile/rdataInfo/0/priority\",\r\n        \"value\": \"101\"\r\n\
                  \    },\r\n    // JSON DTO (pool record with the next highest value for priority field.\r\n    {\r\n   \
                  \     \"op\": \"replace\",\r\n        \"path\": \"/profile/rdataInfo/1/priority\",\r\n        \"value\"\
                  : \"1\"\r\n    }\r\n]"
            schema:
              type: object
              additionalProperties: true
      responses:
        '200':
          description: ''
    parameters:
    - name: zones_zoneName
      in: path
      required: true
      schema:
        type: string
    - name: sb_rrType
      in: path
      required: true
      schema:
        type: string
    - name: sb_ownerName
      in: path
      required: true
      schema:
        type: string
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
security:
- bearerAuth: []
tags:
- name: Zones
  description: "This folder contains all operations for managing the lifecycle and metadata of your DNS zones. Use these endpoints
    to:\n\n- **Create** new zones\n    \n- **Retrieve** zone details and metadata\n    \n- **Update** zone configuration\n\
    \    \n- **Delete** existing zones\n    \n- **Export** zone files\n    \n- **Capture** zone snapshots\n    \n\nEverything
    here is focused on DNS zone management and its associated metadata."
- name: Records
  description: "This folder includes all endpoints for managing resource record sets (RRSets) within a DNS zone. Each RRSet
    groups records sharing the same owner name, type, and class (always IN). Record data is handled via the `rdata` array,
    which follows the BIND presentation format.\n\nUse these endpoints to:\n\n- **List** all RRSets in a zone\n    \n- **Retrieve**
    a specific RRSet by owner name and type\n    \n- **Create/Update** RRSets by supplying `rdata` entries and TTL\n    \n\
    - **Delete** RRSets\n    \n\nPre‑request scripts in this folder help initialize variables like `zoneName`, `ownerName`,
    and `recordType`. Run these scripts or set the corresponding environment variables before making calls."
- name: Tasks
  description: "This folder contains endpoints for monitoring asynchronous background tasks (e.g., zone snapshots or exports):\n\
    \n- When you invoke an operation that returns **202 Accepted**, the response headers include an `x-task-id`.\n    \n-
    The collection’s pre‑request scripts save that ID to the `{{currentTask}}` variable.\n    \n- Use these endpoints to:\n\
    \    \n    - **Check status** of the task referenced by `{{currentTask}}`\n        \n    - **Retrieve results** once the
    task completes\n        \n- Running any new task‑generating request will overwrite `{{currentTask}}`, so poll status before
    kicking off another job."
- name: Reports
  description: "This folder contains all endpoints for generating and fetching DNS analytics reports:\n\n- **Create a report**\n\
    \    \n    - `POST /reports` (or similar)\n        \n    - Response body includes a JSON `id` for your report\n      \
    \  \n    - That `id` is saved automatically to `{{currentReport}}`\n        \n- **Check report status & retrieve results**\n\
    \    \n    - `GET /reports/requests/{{currentReport}}`\n        \n    - Returns the current state (pending, complete,
    failed) and, once ready, the report data\n        \n- **Notes**\n    \n    - The report ID lives in the `{{currentReport}}`
    variable by default\n        \n    - Running any new “create report” request will overwrite `{{currentReport}}`—poll or
    store it elsewhere if you need multiple reports in flight simultaneously"
- name: Webhook
  description: "This folder contains all endpoints for managing UDNS push‑notification webhooks:\n\n- **Create Webhook** \
    \ \n      \n    Sends your `url`, `headers`, and event filters to UDNS. (No prior validation required, but you’ll typically
    want to test first.)\n    \n- **Test Webhook**  \n      \n    Triggers a sample telemetry event to your configured endpoint.\n\
    \    \n    - On success, the response body returns an `eventId`\n        \n    - That `eventId` is saved to `{{currentWebhookEventId}}`\n\
    \        \n- **Verify Webhook Event**  \n      \n    Polls `/webhooks/events/{{currentWebhookEventId}}` to confirm delivery
    status and any response details.\n    \n\n**Notes:**\n\n- Replace or set `webhookUrl` and any auth headers in your environment
    before calling **Create Webhook**.\n    \n- Running **Test Webhook** will overwrite `{{currentWebhookEventId}}`. Poll
    or store it elsewhere if you need to verify multiple events."
- name: Subaccounts
  description: "This folder contains endpoints for managing reseller‑style subaccounts under your primary UltraDNS account:\n\
    \n- **List Subaccounts & Zones**\n    \n    - `GET /subaccounts`\n        \n    - Returns all subaccounts and, optionally,
    their zones in one call using your primary account credentials\n        \n- **Masquerade as Subaccount**\n    \n    -
    `POST /subaccounts/{subaccountId}/auth`\n        \n    - Generates a bearer token and refresh token scoped to the specified
    subaccount\n        \n    - Use these tokens in subsequent calls to act on behalf of that subaccount\n        \n\n**Usage
    Notes:**\n\n- All calls start with your primary account credentials.\n    \n- After masquerading, switch your `{{bearerToken}}`
    variable to the new token to make subaccount‑scoped requests."
- name: DNSSEC Multi-Signer
  description: "UltraDNS API endpoints that support [multi-signer DNSSEC](https://ultra-portalstatic.ultradns.com/static/console/docs/DNSSEC-Multi_Signer-Guide.pdf).\n\
    \nUltraDNS DNSSEC uses _online_ (also known as _on-the-fly_) signing in generating signed responses to queries. UltraDNS
    supports DNSSEC algorithm 13 only for this process. Implementers of multi-signer can add DNSKEY details for external signers
    using other algorithms as needed, but all UltraDNS generated key information uses algorithm 13 (ECDSA).\n\nAdditionally,
    UltraDNS signers generate a unique KSK and ZSK for every zone. This approach gives flexibility for zone owners to roll
    their KSK without impacting other zones that share the KSK information and allows the ZSK to be automatically rolled at
    regular intervals. The implementation of multi-signer follows the methods described in [RFC 8901 model 2](https://www.rfc-editor.org/rfc/rfc8901.html#name-model-2-unique-ksk-set-and-)
    where each signer maintains its own unique KSK and ZSK.\n\nSupport of DNSSEC Multi-Signer is derived from, and supports
    portions of the following RFCs:\n\n- [RFC 8901](https://www.rfc-editor.org/rfc/rfc8901.html) - Multi-Signer DNSSEC Models.\n\
    \    \n- [RFC 7344](https://www.rfc-editor.org/rfc/rfc7344) - Automating DNSSEC Delegation Trust Maintenance.\n    \n\
    - [RFC 8078](https://www.rfc-editor.org/rfc/rfc8078) - Managing DS Records from the Parent via CDS/CDNSKEY.\n    \n- [RFC
    6781](https://www.rfc-editor.org/rfc/rfc6781.html) - DNSSEC Operational Practices, Version 2."
- name: Traffic Management
  description: "This folder groups UltraDNS’s advanced traffic‑management features, each in its own subfolder:\n\n- **SiteBacker**:
    configure health‑check probes that monitor endpoints and automatically steer traffic away from failures\n    \n- **Direction**:
    set up geography‑aware routing so queries resolve to the closest or best‑suited data center\n    \n- **Traffic Controller**:
    create load‑balancing rules to distribute DNS traffic across multiple targets based on weight, priority, or custom logic\n\
    \    \n- **\\[Other advanced services\\]**: each subfolder covers a specific traffic‑management API for steering, failover,
    and performance optimization\n    \n\nUse these endpoints to build resilient, geo‑intelligent DNS strategies that adapt
    in real time to health, location, and load."
- name: SiteBacker
  description: "This folder contains endpoints for managing SiteBacker pools—a traffic‑management feature that groups multiple
    IPs under one DNS record and uses health‑check probes to steer queries based on endpoint health and defined priorities.\n\
    \n- **Create Pool**: provision a new pool of endpoints for a given zone/record, complete with probe settings and failover
    rules\n    \n- **Update Member Priority**: reorder pool members to control failover order"
