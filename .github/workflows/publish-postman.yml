name: Publish Postman Collection & Environment

on:
  release:
    types: [published]
  workflow_run:
    workflows: ["Generate a Release from a Tag"]
    types:
      - completed

jobs:
  publish:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'release' || 
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Update collection version
        run: |
          # Get version from either release event or workflow run
          if [ "${{ github.event_name }}" == "release" ]; then
            VERSION="${{ github.event.release.tag_name }}"
          else
            VERSION="${{ github.event.workflow_run.head_branch }}"
          fi
          
          # Read the collection file
          COLLECTION=$(cat src/UDNS.postman_collection.json)
          
          # Get the current name and append version
          CURRENT_NAME=$(echo "$COLLECTION" | jq -r '.info.name')
          NEW_NAME="${CURRENT_NAME} v${VERSION#v}"
          
          # Update the name in the info object
          UPDATED_COLLECTION=$(echo "$COLLECTION" | jq --arg name "$NEW_NAME" '.info.name = $name')
          
          # Write back to file
          echo "$UPDATED_COLLECTION" > src/UDNS.postman_collection.json

      - name: Update environment version
        run: |
          # Get version from either release event or workflow run
          if [ "${{ github.event_name }}" == "release" ]; then
            VERSION="${{ github.event.release.tag_name }}"
          else
            VERSION="${{ github.event.workflow_run.head_branch }}"
          fi
          
          # Read the environment file
          ENVIRONMENT=$(cat src/UDNS.postman_environment.json)
          
          # Get the current name and append version
          CURRENT_NAME=$(echo "$ENVIRONMENT" | jq -r '.name')
          NEW_NAME="${CURRENT_NAME} v${VERSION#v}"
          
          # Update the name
          UPDATED_ENVIRONMENT=$(echo "$ENVIRONMENT" | jq --arg name "$NEW_NAME" '.name = $name')
          
          # Write back to file
          echo "$UPDATED_ENVIRONMENT" > src/UDNS.postman_environment.json

      - name: Publish collection to Postman
        run: |
          # Create temporary files
          TEMP_COLLECTION=$(mktemp)
          TEMP_REQUEST=$(mktemp)
          
          # Read the collection file into a temporary file
          cp src/UDNS.postman_collection.json "$TEMP_COLLECTION"
          
          # Create the request body using temporary files
          echo '{}' > "$TEMP_REQUEST"
          jq --arg workspace "${{ secrets.POSTMAN_WORKSPACE_ID }}" --slurpfile collection "$TEMP_COLLECTION" '. + {workspace: $workspace, collection: $collection[0]}' "$TEMP_REQUEST" > "$TEMP_REQUEST"
          
          # Send to Postman API
          RESPONSE=$(curl -s -w "\n%{http_code}" \
            -X PUT \
            -H "X-API-Key: ${{ secrets.POSTMAN_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d @"$TEMP_REQUEST" \
            "https://api.getpostman.com/collections/${{ secrets.POSTMAN_COLLECTION_ID }}")
          
          # Clean up temporary files
          rm -f "$TEMP_COLLECTION" "$TEMP_REQUEST"
          
          # Split response into body and status code
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | sed '$d')
          
          # Check if the request was successful
          if [ "$HTTP_CODE" -ge 200 ] && [ "$HTTP_CODE" -lt 300 ]; then
            echo "Collection published successfully"
            echo "Response: $BODY"
          else
            echo "Failed to publish collection. Status code: $HTTP_CODE"
            echo "Response: $BODY"
            exit 1
          fi

      - name: Publish environment to Postman
        run: |
          # Create temporary files
          TEMP_ENV=$(mktemp)
          TEMP_REQUEST=$(mktemp)
          
          # Read the environment file into a temporary file
          cp src/UDNS.postman_environment.json "$TEMP_ENV"
          
          # Create the request body using temporary files
          echo '{}' > "$TEMP_REQUEST"
          jq --arg workspace "${{ secrets.POSTMAN_WORKSPACE_ID }}" --slurpfile environment "$TEMP_ENV" '. + {workspace: $workspace, environment: $environment[0]}' "$TEMP_REQUEST" > "$TEMP_REQUEST"
          
          # Send to Postman API
          RESPONSE=$(curl -s -w "\n%{http_code}" \
            -X PUT \
            -H "X-API-Key: ${{ secrets.POSTMAN_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d @"$TEMP_REQUEST" \
            "https://api.getpostman.com/environments/${{ secrets.POSTMAN_ENVIRONMENT_ID }}")
          
          # Clean up temporary files
          rm -f "$TEMP_ENV" "$TEMP_REQUEST"
          
          # Split response into body and status code
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | sed '$d')
          
          # Check if the request was successful
          if [ "$HTTP_CODE" -ge 200 ] && [ "$HTTP_CODE" -lt 300 ]; then
            echo "Environment published successfully"
            echo "Response: $BODY"
          else
            echo "Failed to publish environment. Status code: $HTTP_CODE"
            echo "Response: $BODY"
            exit 1
          fi 